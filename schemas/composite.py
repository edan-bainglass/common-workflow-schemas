from __future__ import annotations

import typing as t

import pydantic as pdt
from aiida.plugins import WorkflowFactory

from .utils import MetadataField

T = t.TypeVar("T", bound=pdt.BaseModel)


class CompositeInputsModel(pdt.BaseModel, t.Generic[T]):
    sub_process_class: t.Annotated[
        str,
        MetadataField(
            description=(
                "The quantum engine that will be used for the relaxation given as a "
                "valid workflow entry point for a common relax implementation. To see "
                "a list of all available entry points, use `verdi plugin list "
                "aiida.workflows`. Any entry point that starts with "
                "`common_workflows.relax.` can be used."
            ),
        ),
    ]
    generator_inputs: t.Annotated[
        T,
        MetadataField(
            description=(
                "The inputs to pass to the generator process. If not specified, the "
                "default inputs will be used."
            ),
        ),
    ]
    sub_process: t.Annotated[
        dict[str, t.Any],
        MetadataField(
            description=(
                "Code-dependent inputs overridding those generated by "
                "`generator_inputs`. The inputs must be valid ports of the "
                "`sub_process_class`."
            )
        ),
    ]

    @pdt.field_validator("sub_process_class")
    def _validate_sub_process_class(self, sub_process_entry_point: str):
        if not sub_process_entry_point.startswith("common_workflows.relax."):
            raise ValueError(
                f"`sub_process_class` should start with 'common_workflows.relax.', got "
                f"'{sub_process_entry_point}'"
            )
        return sub_process_entry_point

    @pdt.field_validator("sub_process")
    def _validate_sub_process(self, sub_process_dict: dict[str, t.Any]):
        workchain = WorkflowFactory(self.sub_process_class)
        for key in sub_process_dict:
            if not hasattr(workchain, key):
                raise ValueError(
                    f"Invalid input key '{key}' for sub-process class"
                    f"'{self.sub_process_class}'"
                )


class CompositeOutputsModel(pdt.BaseModel):
    total_energies: t.Annotated[
        list[float],
        MetadataField(
            description="The computed total energy for each sub-process.",
        ),
    ]
    total_magnetizations: t.Annotated[
        list[float] | None,
        MetadataField(
            description=(
                "The total magnetization, in Î¼B, of the final structure of each sub "
                "process, if returned by the underlying common relax workflow."
            ),
        ),
    ]
